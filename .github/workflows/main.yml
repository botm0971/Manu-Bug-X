    if ((m.type === 'imageMessage') || isQuotedImage) {
        const nameJpg = getRandom('.jpg');
        const imageBuffer = isQuotedImage ? await m.quoted.download() : await m.download();
        await require('fs').promises.writeFile(nameJpg, imageBuffer);

        let sticker = new Sticker(nameJpg, {
            pack: pushname, // The pack name
            author: '', // The author name
            type: q.includes('--crop') || q.includes('-c') ? StickerTypes.CROPPED : StickerTypes.FULL,
            categories: ['ðŸ¤©', 'ðŸŽ‰'], // The sticker category
            id: '12345', // The sticker id
            quality: 75, // The quality of the output file
            background: 'transparent', // The sticker background color (only for full stickers)
        });

        const buffer = await sticker.toBuffer();
        return conn.sendMessage(from, { sticker: buffer }, { quoted: mek });
    } else if (isQuotedSticker) {
        const nameWebp = getRandom('.webp');
        const stickerBuffer = await m.quoted.download();
        await require('fs').promises.writeFile(nameWebp, stickerBuffer);

        let sticker = new Sticker(nameWebp, {
            pack: pushname, // The pack name
            author: '', // The author name
            type: q.includes('--crop') || q.includes('-c') ? StickerTypes.CROPPED : StickerTypes.FULL,
            categories: ['ðŸ¤©', 'ðŸŽ‰'], // The sticker category
            id: '12345', // The sticker id
            quality: 75, // The quality of the output file
            background: 'transparent', // The sticker background color (only for full stickers)
        });

        const buffer = await sticker.toBuffer();
        return conn.sendMessage(from, { sticker: buffer }, { quoted: mek });
    } else {
        return await reply(imgmsg);
    }
} catch (e) {
    reply('Error !!');
    console.error(e);
}
